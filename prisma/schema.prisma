// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                Int                @id @default(autoincrement())
  companyName       String             @unique
  companyCode       String             @unique
  userCount         Int
  authCode          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  users             User[]
  customers         Customer[]
  cars              Car[]
  contracts         Contract[]
  contractDocuments ContractDocument[]
}

model User {
  id             Int      @id @default(autoincrement())
  companyId      Int
  name           String
  email          String   @unique
  password       String
  employeeNumber String   @unique
  phoneNumber    String
  imageUrl       String?
  isAdmin        Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contracts Contract[]
}

model Customer {
  id            Int       @id @default(autoincrement())
  companyId     Int
  name          String
  gender        Gender
  phoneNumber   String
  ageGroup      AgeGroup?
  region        Region?
  email         String?
  memo          String?
  contractCount Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contracts Contract[]
}

model Car {
  id                Int       @id @default(autoincrement())
  companyId         Int
  carNumber         String    @unique
  manufacturer      String
  model             String
  type              String
  manufacturingYear Int
  mileage           Int
  price             Int
  accidentCount     Int
  explanation       String?
  accidentDetails   String?
  carStatus         CarStatus @default(POSSESSION)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contracts Contract[]
}

model Contract {
  id             Int            @id @default(autoincrement())
  userId         Int
  carId          Int
  customerId     Int
  companyId      Int
  contractStatus ContractStatus @default(CAR_INSPECTION)
  resolutionDate DateTime
  contractPrice  Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  car               Car                @relation(fields: [carId], references: [id], onDelete: Cascade)
  customer          Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  company           Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  meeting           Meeting[]
  contractDocuments ContractDocument[]
}

model Meeting {
  id         Int      @id @default(autoincrement())
  contractId Int
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  alarm      Alarm[]
}

model Alarm {
  id        Int      @id @default(autoincrement())
  meetingId Int
  time      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}

model ContractDocument {
  id         Int      @id @default(autoincrement())
  contractId Int
  companyId  Int
  fileName   String
  filePath   String
  fileSize   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum Gender {
  male
  female
}

enum AgeGroup {
  AGE_10
  AGE_20
  AGE_30
  AGE_40
  AGE_50
  AGE_60
  AGE_70
  AGE_80
  AGE_90
}

enum Region {
  SEOUL
  BUSAN
  DAEGU
  INCHEON
  GWANGJU
  DAEJEON
  ULSAN
  SEJONG
  GYEONGGI
  GANGWON
  CHUNGBUK
  CHUNGNAM
  JEONBUK
  JEONNAM
  GYEONGBUK
  GYEONGNAM
  JEJU
}

enum CarStatus {
  POSSESSION
  CONTRACT_PROCEEDING
  CONTRACT_COMPLETED
}

enum ContractStatus {
  CAR_INSPECTION
  PRICE_NEGOTIATION
  CONTRACT_DRAFT
  CONTRACT_SUCCESSFUL
  CONTRACT_FAILED
}
